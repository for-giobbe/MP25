test <- runTest(myGOdata, algorithm="classic", statistic="fisher")
allRes_Oedu_genes <- GenTable(myGOdata,
test = test,
orderBy = "test", topNodes=1000)
allRes_Oedu_genes <- subset(allRes_Oedu_genes, test < 0.01)
allRes_Oedu_genes <- allRes_Oedu_genes[order(allRes_Oedu_genes$test,decreasing = T),]
allRes_Oedu_genes <- head(allRes_Oedu_genes,25)
row.names(allRes_Oedu_genes) <- NULL
allRes_Oedu_genes$color <- -log(as.numeric(allRes_Oedu_genes$test))
Oedu_genes <- formattable(allRes_Oedu_genes, list(color = FALSE, Expected = FALSE,
`GO.ID` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`test`= color_tile("orange", "white"),
`Significant`= color_bar("orange")),
table.attr = 'style="font-size: 20px; font-family: Arial";\"')
export_formattable(Oedu_genes,"Desktop/For_Giobbe/Oedu_genes.png")
allRes_Oedu_genes <- GenTable(myGOdata,
test = test,
orderBy = "test", topNodes=1000)
allRes_Oedu_genes
genesOfInterest <-  read.delim("Desktop/For_Giobbe/Oedu/Oedu_Hem.genes.list_PROTEINS", header = F)
genesOfInterest <-  genesOfInterest$V1
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdata <- new("topGOdata", description="Oedu_genes", ontology="BP", allGenes=geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO, nodeSize=6)
test <- runTest(myGOdata, algorithm="classic", statistic="fisher")
allRes_Oedu_genes <- GenTable(myGOdata,
test = test,
orderBy = "test", topNodes=1000)
allRes_Oedu_genes <- subset(allRes_Oedu_genes, test < 0.01)
allRes_Oedu_genes <- allRes_Oedu_genes[order(allRes_Oedu_genes$test,decreasing = T),]
allRes_Oedu_genes <- head(allRes_Oedu_genes,25)
row.names(allRes_Oedu_genes) <- NULL
allRes_Oedu_genes$color <- -log(as.numeric(allRes_Oedu_genes$test))
Oedu_genes <- formattable(allRes_Oedu_genes, list(color = FALSE, Expected = FALSE,
`GO.ID` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`test`= color_tile("orange", "white"),
`Significant`= color_bar("orange")),
table.attr = 'style="font-size: 20px; font-family: Arial";\"')
export_formattable(Oedu_genes,"Desktop/For_Giobbe/Oedu_genes.png")
allRes_Oedu_genes <- GenTable(myGOdata,
test = test,
orderBy = "test", topNodes=1000)
allRes_Oedu_genes <- subset(allRes_Oedu_genes, test < 0.01)
allRes_Oedu_genes <- allRes_Oedu_genes[order(allRes_Oedu_genes$test,decreasing = T),]
allRes_Oedu_genes <- head(allRes_Oedu_genes,35)
row.names(allRes_Oedu_genes) <- NULL
allRes_Oedu_genes$color <- -log(as.numeric(allRes_Oedu_genes$test))
Oedu_genes <- formattable(allRes_Oedu_genes, list(color = FALSE, Expected = FALSE,
`GO.ID` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`test`= color_tile("orange", "white"),
`Significant`= color_bar("orange")),
table.attr = 'style="font-size: 20px; font-family: Arial";\"')
export_formattable(Oedu_genes,"Desktop/For_Giobbe/Oedu_genes.png")
################################################################################################################################ Cgig ####
geneID2GO <- readMappings(file = "Desktop/For_Giobbe/Cgig/Cgig_geneuniverse")
geneUniverse <- names(geneID2GO)
################################################################################################################################ Cgig exons BP ####
genesOfInterest <-  read.delim("Desktop/For_Giobbe/Cgig/Cgig_Hem.Exons.genes.list_PROTEINS", header = F)
genesOfInterest <-  genesOfInterest$V1
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdata <- new("topGOdata", description="Cgig_exons", ontology="BP", allGenes=geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO, nodeSize=6)
test <- runTest(myGOdata, algorithm="classic", statistic="fisher")
allRes_Cgig_exons <- GenTable(myGOdata,
test = test,
orderBy = "test", topNodes=1000)
allRes_Cgig_exons <- subset(allRes_Cgig_exons, test < 0.01)
allRes_Cgig_exons <- allRes_Cgig_exons[order(allRes_Cgig_exons$test,decreasing = F),]
allRes_Cgig_exons <- head(allRes_Cgig_exons,25)
row.names(allRes_Cgig_exons) <- NULL
allRes_Cgig_exons$color <- -log(as.numeric(allRes_Cgig_exons$test))
Cgig_exons <- formattable(allRes_Cgig_exons, list(color = FALSE, Expected = FALSE,
`GO.ID` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`test`= color_tile("orange", "white"),
`Significant`= color_bar("orange")),
table.attr = 'style="font-size: 20px; font-family: Arial";\"')
export_formattable(Cgig_exons,"Desktop/For_Giobbe/Cgig_exons.png")
################################################################################################################################ Cgig genes BP ####
genesOfInterest <-  read.delim("Desktop/For_Giobbe/Cgig/Cgig_Hem.genes.list_PROTEINS", header = F)
genesOfInterest <-  genesOfInterest$V1
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdata <- new("topGOdata", description="Cgig_genes", ontology="BP", allGenes=geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO, nodeSize=6)
test <- runTest(myGOdata, algorithm="classic", statistic="fisher")
allRes_Cgig_genes <- GenTable(myGOdata,
test = test,
orderBy = "test", topNodes=1000)
allRes_Cgig_genes <- subset(allRes_Cgig_genes, test < 0.01)
allRes_Cgig_genes <- allRes_Cgig_genes[order(allRes_Cgig_genes$test,decreasing = F),]
allRes_Cgig_genes <- head(allRes_Cgig_genes,25)
row.names(allRes_Cgig_genes) <- NULL
allRes_Cgig_genes$color <- -log(as.numeric(allRes_Cgig_genes$test))
Cgig_genes <- formattable(allRes_Cgig_genes, list(color = FALSE, Expected = FALSE,
`GO.ID` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`test`= color_tile("orange", "white"),
`Significant`= color_bar("orange")),
table.attr = 'style="font-size: 20px; font-family: Arial";\"')
export_formattable(Cgig_genes,"Desktop/For_Giobbe/Cgig_genes.png")
################################################################################################################################ Oedu ####
geneID2GO <- readMappings(file = "Desktop/For_Giobbe/Oedu/Oedu_geneuniverse")
geneUniverse <- names(geneID2GO)
################################################################################################################################ Oedu exons BP ####
genesOfInterest <-  read.delim("Desktop/For_Giobbe/Oedu/Oedu_Hem.Exons.genes.list_PROTEINS", header = F)
genesOfInterest <-  genesOfInterest$V1
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdata <- new("topGOdata", description="Oedu_exons", ontology="BP", allGenes=geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO, nodeSize=6)
test <- runTest(myGOdata, algorithm="classic", statistic="fisher")
allRes_Oedu_exons <- GenTable(myGOdata,
test = test,
orderBy = "test", topNodes=1000)
allRes_Oedu_exons <- subset(allRes_Oedu_exons, test < 0.01)
allRes_Oedu_exons <- allRes_Oedu_exons[order(allRes_Oedu_exons$test,decreasing = F),]
allRes_Oedu_exons <- head(allRes_Oedu_exons,25)
row.names(allRes_Oedu_exons) <- NULL
allRes_Oedu_exons$color <- -log(as.numeric(allRes_Oedu_exons$test))
Oedu_exons <- formattable(allRes_Oedu_exons, list(color = FALSE, Expected = FALSE,
`GO.ID` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`test`= color_tile("orange", "white"),
`Significant`= color_bar("orange")),
table.attr = 'style="font-size: 20px; font-family: Arial";\"')
export_formattable(Oedu_exons,"Desktop/For_Giobbe/Oedu_exons.png")
################################################################################################################################ Oedu genes BP ####
genesOfInterest <-  read.delim("Desktop/For_Giobbe/Oedu/Oedu_Hem.genes.list_PROTEINS", header = F)
genesOfInterest <-  genesOfInterest$V1
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdata <- new("topGOdata", description="Oedu_genes", ontology="BP", allGenes=geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO, nodeSize=6)
test <- runTest(myGOdata, algorithm="classic", statistic="fisher")
allRes_Oedu_genes <- GenTable(myGOdata,
test = test,
orderBy = "test", topNodes=1000)
allRes_Oedu_genes <- subset(allRes_Oedu_genes, test < 0.01)
allRes_Oedu_genes <- allRes_Oedu_genes[order(allRes_Oedu_genes$test,decreasing = F),]
allRes_Oedu_genes <- head(allRes_Oedu_genes,25)
row.names(allRes_Oedu_genes) <- NULL
allRes_Oedu_genes$color <- -log(as.numeric(allRes_Oedu_genes$test))
Oedu_genes <- formattable(allRes_Oedu_genes, list(color = FALSE, Expected = FALSE,
`GO.ID` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`test`= color_tile("orange", "white"),
`Significant`= color_bar("orange")),
table.attr = 'style="font-size: 20px; font-family: Arial";\"')
export_formattable(Oedu_genes,"Desktop/For_Giobbe/Oedu_genes.png")
BiocManager::install("msa")
library(msa)
mySequenceFile <- system.file("examples", "exampleAA.fasta", package="msa")
mySequences <- readAAStringSet(mySequenceFile)
mySequences
myFirstAlignment <- msa(mySequences)
myFirstAlignment
print(myFirstAlignment, show="complete")
msaPrettyPrint(myFirstAlignment, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
require(pdflatex)
install("pdflatex")
install.packages("pdflatex")
myFirstAlignment <- msa(mySequences,"Muscle")
print(myFirstAlignment, show="complete")
Tree <- nj(myFirstAlignment)
library(ape)
Tree <- nj(myFirstAlignment)
myFirstAlignment
Tree <- nj(myFirstAlignment)
library(seqinr)
d <- dist.alignment(myFirstAlignment, "identity")
myFirstAlignment <- msa(mySequences,"Muscle")
Aln2 <- msaConvert(myFirstAlignment, type="seqinr::alignment")
d <- dist.alignment(myFirstAlignment, "identity")
d <- dist.alignment(Aln2, "identity")
Tree <- nj(myFirstAlignment)
Tree <- nj(d)
plot(Tree, main="Phylogenetic Tree")
devtools::install_github("YuLab-SMU/ggmsa")
install.packages("devtools")
devtools::install_github("YuLab-SMU/ggmsa")
library(devtools)
if (!requireNamespace("devtools", quietly=TRUE))
install.packages("devtools")
library(ggmsa)
install.packages(ggmsa)
install.packages('ggmsa')
version
library("ggmsa")
library(ggplot2)
library(ggplot2)
library(ggtree)
install.packages('gblocks')
library(gblocks)
library(aliscore)
install.packages('aliscore')
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3673.038880
model_a_np <- 3
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
adj.p.value <- p.adjust(p.value, method = "hochberg", n = length(p.value))
adj.p.value
p.value
# m0 VS m1
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3653.787097
model_a_np <- 12
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m1
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3653.787097
model_a_np <- 12
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_g_np=model_a_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m1
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3653.787097
model_a_np <- 12
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_g_np-model_a_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
model_g_np
model_a_np
# m0 VS m1
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3653.787097
model_a_np <- 12
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m2
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3673.038880
model_a_np <- 3
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# msites_gen VS msites_alt
model_g_LnL <- -3600.166724
model_g_np <- 4
model_a_LnL <- -3598.859405
model_a_np <- 5
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# msites_gen VS msites_alt
model_g_LnL <- -3600.166724
model_g_np <- 4
model_a_LnL <- -3598.859405
model_a_np <- 5
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# msites_gen VS msites_alt
model_g_LnL <- -3600.166724
model_g_np <- 4
model_a_LnL <- -3598.859405
model_a_np <- 5
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m2
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3675.872510
model_a_np <- 3
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m2
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3675.872510
model_a_np <- 3
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m1
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3653.787097
model_a_np <- 12
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# msites_gen VS msites_alt
model_g_LnL <- -3605.613583
model_g_np <- 4
model_a_LnL <- -3602.558942
model_a_np <- 5
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m2
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3675.872510
model_a_np <- 3
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m2
model_g_LnL <- -3104.053725
model_g_np <- 2
model_a_LnL <- -3101.800638
model_a_np <- 3
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m1
model_g_LnL <- -3104.053725
model_g_np <- 2
model_a_LnL <- -3091.632134
model_a_np <- 12
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# msites_gen VS msites_alt
model_g_LnL <- -3042.036350
model_g_np <- 4
model_a_LnL <- -3039.265700
model_a_np <- 5
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m2
model_g_LnL <- -3104.053725
model_g_np <- 2
model_a_LnL <- -3103.718512
model_a_np <- 3
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m1
model_g_LnL <- -3675.883443
model_g_np <- 2
model_a_LnL <- -3091.632134
model_a_np <- 12
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# msites_gen VS msites_alt
model_g_LnL <- -3042.044487
model_g_np <- 4
model_a_LnL <- -3042.044487
model_a_np <- 5
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m2
model_g_LnL <- -3104.053725
model_g_np <- 2
model_a_LnL <- -3103.718512
model_a_np <- 3
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m1
model_g_LnL <- -3104.053725
model_g_np <- 2
model_a_LnL <- -3091.632134
model_a_np <- 12
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# msites_gen VS msites_alt
model_g_LnL <- -3600.166724
model_g_np <- 4
model_a_LnL <- -3598.859405
model_a_np <- 5
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m0 VS m2
model_g_LnL <- -3675.883443
# msites_gen VS msites_alt
model_g_LnL <- -3600.166724
model_g_np <- 4
model_a_LnL <- -3598.859405
model_a_np <- 5
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
# m2 VS m1
model_g_LnL <- -3673.038880
model_g_np <- 3
model_a_LnL <- -3653.787097
model_a_np <- 12
LRT <- -2*(model_g_LnL-model_a_LnL)
degrees.of.freedom <- model_a_np-model_g_np
p.value <- 1-pchisq(LRT,df=degrees.of.freedom)
p.value
BiocManager::install("Apex")
require(DESeq2)
library(data.table)
library(dplyr)
library(formattable)
library(tidyr)
library(htmltools)
install.packages("dplyr")
require(dplyr)
################################################################################################################## requirements ####
install.packages("DESeq2")
require(DESeq2)
################################################################################################################## requirements ####
install.packages("DESeq2")
################################################################################################################## requirements ####
install.packages("topGO")
################################################################################################################## requirements ####
install.packages("formattable")
require(formattable)
################################################################################################################## requirements ####
install.packages("scales")
require(scales)
################################################################################################################## requirements ####
install.packages("ggplot2")
require(ggplot2)
################################################################################################################## requirements ####
install.packages("ggtree")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
BiocManager::install("DESeq2")
require(DESeq2)
install.packages("ggtree")
BiocManager::install("ggtree")
require(ggtree)
pwd()
setwd("~/Desktop/data/example_PCM")
setwd("~/Desktop/MP25/data/example_PCM/")
library(ape)
library(phytools)
library(phytools)
library(geiger)
install.packages('phytools')
install.packages('phytools')
library(phytools)
install.packages('geiger')
library('geiger')
l
library(ape)
library(phytools)
library(geiger)
tree <- read.tree("tree_octopodiformes.nwk")
tree <- read.tree("tree_octopodiformes.nwk")
tree <- force.ultrametric(tree,"extend")
data <- read.table("traits_octopodiformes.csv", sep = ",", row.names = 1, header = T)
data <- setNames(as.factor(data[,"discrete"]),rownames(data))
ER <- fitDiscrete(tree, data, model="ER")
SYM <- fitDiscrete(tree,data,model="SYM")
ARD <- fitDiscrete(tree,data,model="ARD")
ER
SYM
ARD
ARD <- fitDiscrete(tree,data,model="ARD")
plot(ARD)
aicc<-setNames(c(ER$opt$aicc,
ARD$opt$aicc,
SYM$opt$aicc),
c("Equal Rates",
"All Rates Different",
"Symmetrical"))
aicw(aicc)
fitARD<-ace(data,tree,model="ARD",type="discrete")
fitARD
levels(data)
cols <- c("red","purple","orange","blue","yellow")
trait_cols <- setNames(c(
levels(data)[1],
levels(data)[2],
levels(data)[3],
levels(data)[4],
levels(data)[5]),
c("red",
"purple",
"orange",
"blue",
"yellow"))
trait_cols
plot.phylo(tree,lwd=7.5, edge.width = 7.5, label.offset = .2,show.tip.label = T,no.margin = TRUE,
edge.color = "lightgray")
nodelabels(node=1:tree$Nnode+Ntip(tree),pie=fitARD$lik.anc,cex=0.42, piecol = cols)
tiplabels(pie=to.matrix(data[tree$tip.label],levels(data)),cex=0.42, piecol = cols)
ARD
